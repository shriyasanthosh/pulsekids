import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, Dimensions, Animated } from 'react-native';

const { width } = Dimensions.get('window');

export const PPGVisualization = ({ 
  signalData, 
  heartRate, 
  bloodPressure,
  confidence, 
  isScanning,
  signalQuality = 'good',
  temperature = 37,
  childAge = 5
}) => {
  const [animatedValues] = useState(() => ({
    pulse: new Animated.Value(1),
    confidence: new Animated.Value(0),
    heartBeat: new Animated.Value(1),
  }));

  useEffect(() => {
    if (isScanning) {
      startPulseAnimation();
      animateConfidence(confidence);
    } else {
      stopPulseAnimation();
    }
  }, [isScanning, confidence]);

  const startPulseAnimation = () => {
    const interval = heartRate ? 60000 / heartRate : 1000;
    
    const animate = () => {
      Animated.sequence([
        Animated.timing(animatedValues.pulse, {
          toValue: 1.15,
          duration: 150,
          useNativeDriver: true,
        }),
        Animated.timing(animatedValues.pulse, {
          toValue: 1,
          duration: 150,
          useNativeDriver: true,
        })
      ]).start(() => {
        if (isScanning) {
          setTimeout(animate, interval - 300);
        }
      });
    };
    
    animate();
  };

  const stopPulseAnimation = () => {
    animatedValues.pulse.stopAnimation();
    animatedValues.pulse.setValue(1);
  };

  const animateConfidence = (conf) => {
    Animated.timing(animatedValues.confidence, {
      toValue: conf || 0,
      duration: 800,
      useNativeDriver: false,
    }).start();
  };

  const getSignalColor = () => {
    switch (signalQuality) {
      case 'excellent': return '#00ff88';
      case 'good': return '#00d4ff';
      case 'fair': return '#ffb800';
      case 'poor': return '#ff4444';
      default: return '#888888';
    }
  };

  const getConfidenceColor = () => {
    if (confidence > 0.8) return '#00ff88';
    if (confidence > 0.6) return '#00d4ff';
    if (confidence > 0.4) return '#ffb800';
    return '#ff4444';
  };

  const getBPStatus = () => {
    if (!bloodPressure || !bloodPressure.systolic) return 'Unknown';
    
    const sys = bloodPressure.systolic;
    const dia = bloodPressure.diastolic;
    
    // Age-adjusted BP categories for children
    if (childAge <= 1) {
      if (sys < 80 && dia < 55) return 'Normal';
      if (sys < 90 && dia < 65) return 'Elevated';
      if (sys < 100 || dia < 75) return 'High Stage 1';
      if (sys < 110 || dia < 85) return 'High Stage 2';
      return 'Crisis';
    } else if (childAge <= 3) {
      if (sys < 85 && dia < 60) return 'Normal';
      if (sys < 95 && dia < 70) return 'Elevated';
      if (sys < 105 || dia < 80) return 'High Stage 1';
      if (sys < 115 || dia < 90) return 'High Stage 2';
      return 'Crisis';
    } else if (childAge <= 5) {
      if (sys < 90 && dia < 65) return 'Normal';
      if (sys < 100 && dia < 75) return 'Elevated';
      if (sys < 110 || dia < 85) return 'High Stage 1';
      if (sys < 120 || dia < 95) return 'High Stage 2';
      return 'Crisis';
    } else if (childAge <= 7) {
      if (sys < 95 && dia < 70) return 'Normal';
      if (sys < 105 && dia < 80) return 'Elevated';
      if (sys < 115 || dia < 90) return 'High Stage 1';
      if (sys < 125 || dia < 100) return 'High Stage 2';
      return 'Crisis';
    }
    
    // Default adult categories
    if (sys < 120 && dia < 80) return 'Normal';
    if (sys < 130 && dia < 80) return 'Elevated';
    if (sys < 140 || dia < 90) return 'High Stage 1';
    if (sys < 180 || dia < 120) return 'High Stage 2';
    return 'Crisis';
  };

  const getBPColor = () => {
    const status = getBPStatus();
    switch (status) {
      case 'Normal': return '#00ff88';
      case 'Elevated': return '#ffb800';
      case 'High Stage 1': return '#ff8800';
      case 'High Stage 2': return '#ff4444';
      case 'Crisis': return '#cc0000';
      default: return '#888888';
    }
  };

  const getTemperatureColor = () => {
    if (temperature < 36) return '#00d4ff';      // Cold
    if (temperature > 38) return '#ff4444';      // Fever
    return '#00ff88';                            // Normal
  };

  const getTemperatureStatus = () => {
    if (temperature < 36) return 'Low';
    if (temperature > 38) return 'Fever';
    return 'Normal';
  };

  const renderSignalBars = () => {
    if (!signalData || signalData.length === 0) return null;

    const barWidth = (width - 60) / Math.min(signalData.length, 60);
    const maxHeight = 80;
    
    return signalData.slice(-60).map((point, index) => (
      <View
        key={index}
        style={[
          styles.signalBar,
          {
            width: Math.max(1, barWidth - 1),
            height: Math.max(2, Math.min(80, Math.abs(point.y) * maxHeight)),
            backgroundColor: getSignalColor(),
            opacity: 0.7 + (Math.abs(point.y) * 0.3),
            left: index * barWidth,
          }
        ]}
      />
    ));
  };

  return (
    <View style={styles.container}>
      {/* Vital Signs Display */}
      <View style={styles.vitalsContainer}>
        
        {/* Heart Rate Section */}
        <Animated.View style={[
          styles.vitalCard,
          { transform: [{ scale: animatedValues.pulse }] }
        ]}>
          <Text style={styles.vitalLabel}>Heart Rate</Text>
          <Text style={[styles.vitalValue, { color: getSignalColor() }]}>
            {heartRate || '--'}
          </Text>
          <Text style={styles.vitalUnit}>BPM</Text>
          
          <View style={styles.pulseIndicator}>
            {Array.from({ length: 5 }).map((_, i) => (
              <Animated.View
                key={i}
                style={[
                  styles.pulseBar,
                  {
                    transform: [{
                      scaleY: animatedValues.pulse.interpolate({
                        inputRange: [1, 1.15],
                        outputRange: [1, 1.2 + i * 0.1],
                      })
                    }],
                    backgroundColor: getSignalColor(),
                    opacity: 0.8 - i * 0.15,
                  }
                ]}
              />
            ))}
          </View>
        </Animated.View>

        {/* Blood Pressure Section */}
        <View style={styles.vitalCard}>
          <Text style={styles.vitalLabel}>Blood Pressure</Text>
          <View style={styles.bpDisplay}>
            <Text style={[styles.bpValue, { color: getBPColor() }]}>
              {bloodPressure?.systolic || '--'}
            </Text>
            <Text style={styles.bpSlash}>/</Text>
            <Text style={[styles.bpValue, { color: getBPColor() }]}>
              {bloodPressure?.diastolic || '--'}
            </Text>
          </View>
          <Text style={styles.vitalUnit}>mmHg</Text>
          
          <View style={[styles.bpStatus, { backgroundColor: getBPColor() }]}>
            <Text style={styles.bpStatusText}>{getBPStatus()}</Text>
          </View>
        </View>

        {/* Temperature Section */}
        <View style={styles.vitalCard}>
          <Text style={styles.vitalLabel}>Temperature</Text>
          <Text style={[styles.vitalValue, { color: getTemperatureColor() }]}>
            {temperature ? `${temperature.toFixed(1)}Â°C` : '--'}
          </Text>
          <Text style={styles.vitalUnit}>Body Temp</Text>
          
          <View style={[styles.tempStatus, { backgroundColor: getTemperatureColor() }]}>
            <Text style={styles.tempStatusText}>{getTemperatureStatus()}</Text>
          </View>
        </View>

      </View>

      {/* Child Age Display */}
      <View style={styles.ageContainer}>
        <Text style={styles.ageLabel}>Child Age: {childAge} years</Text>
        <Text style={styles.ageSubtext}>
          {childAge <= 1 ? 'Infant (0-1 years)' : 
           childAge <= 3 ? 'Toddler (1-3 years)' :
           childAge <= 5 ? 'Preschool (3-5 years)' :
           'School Age (5-7 years)'}
        </Text>
      </View>

      {/* Signal Waveform */}
      <View style={styles.signalContainer}>
        <View style={styles.signalHeader}>
          <Text style={styles.signalTitle}>PPG Signal</Text>
          <View style={[styles.qualityBadge, { backgroundColor: getSignalColor() }]}>
            <Text style={styles.qualityText}>{signalQuality.toUpperCase()}</Text>
          </View>
        </View>

        <View style={styles.chartContainer}>
          <View style={styles.chartGrid}>
            <View style={styles.gridLine} />
            <View style={[styles.gridLine, styles.centerLine]} />
            <View style={styles.gridLine} />
          </View>
          
          <View style={styles.signalChart}>
            {renderSignalBars()}
          </View>
          
          <View style={styles.chartLabels}>
            <Text style={styles.chartLabel}>0s</Text>
            <Text style={styles.chartLabel}>1s</Text>
            <Text style={styles.chartLabel}>2s</Text>
          </View>
        </View>

        {/* Signal Metrics */}
        <View style={styles.metricsRow}>
          <View style={styles.metric}>
            <Text style={styles.metricValue}>{signalData?.length || 0}</Text>
            <Text style={styles.metricLabel}>Samples</Text>
          </View>
          <View style={styles.metric}>
            <Text style={styles.metricValue}>{Math.round((confidence || 0) * 100)}%</Text>
            <Text style={styles.metricLabel}>Confidence</Text>
          </View>
          <View style={styles.metric}>
            <Text style={styles.metricValue}>30</Text>
            <Text style={styles.metricLabel}>FPS</Text>
          </View>
          <View style={styles.metric}>
            <Text style={styles.metricValue}>{signalData?.length ? Math.round((signalData.length / 30)) : 0}s</Text>
            <Text style={styles.metricLabel}>Duration</Text>
          </View>
        </View>
      </View>

      {/* Confidence Indicator */}
      <View style={styles.confidenceSection}>
        <Text style={styles.confidenceLabel}>Measurement Quality</Text>
        <View style={styles.confidenceBar}>
          <Animated.View
            style={[
              styles.confidenceFill,
              {
                width: animatedValues.confidence.interpolate({
                  inputRange: [0, 1],
                  outputRange: ['0%', '100%'],
                }),
                backgroundColor: getConfidenceColor(),
              }
            ]}
          />
        </View>
        <Text style={styles.confidenceValue}>
          {Math.round((confidence || 0) * 100)}% - {signalQuality}
        </Text>
      </View>

      {/* Status Indicators */}
      <View style={styles.statusGrid}>
        <StatusDot label="Camera" active={isScanning} color="#00d4ff" />
        <StatusDot label="Flash" active={isScanning} color="#ffb800" />
        <StatusDot label="Signal" active={signalData && signalData.length > 30} color="#00ff88" />
        <StatusDot label="HR Valid" active={heartRate && heartRate > 0} color="#ff4444" />
      </View>

    </View>
  );
};

const StatusDot = ({ label, active, color }) => (
  <View style={styles.statusDot}>
    <View style={[
      styles.dot,
      { 
        backgroundColor: active ? color : '#333',
      }
    ]} />
    <Text style={[
      styles.statusLabel,
      { color: active ? 'white' : '#666' }
    ]}>
      {label}
    </Text>
  </View>
);

const styles = StyleSheet.create({
  container: {
    marginBottom: 20,
  },
  vitalsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 20,
  },
  vitalCard: {
    flex: 1,
    backgroundColor: 'rgba(255,255,255,0.08)',
    borderRadius: 16,
    padding: 16,
    marginHorizontal: 5,
    alignItems: 'center',
  },
  vitalLabel: {
    color: 'rgba(255,255,255,0.7)',
    fontSize: 12,
    fontWeight: '600',
    marginBottom: 8,
  },
  vitalValue: {
    fontSize: 28,
    fontWeight: 'bold',
  },
  vitalUnit: {
    color: 'rgba(255,255,255,0.6)',
    fontSize: 12,
    marginTop: 4,
  },
  pulseIndicator: {
    flexDirection: 'row',
    alignItems: 'flex-end',
    marginTop: 8,
    height: 35,
  },
  pulseBar: {
    width: 3,
    height: 20,
    marginHorizontal: 1,
    borderRadius: 2,
  },
  bpDisplay: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  bpValue: {
    fontSize: 24,
    fontWeight: 'bold',
  },
  bpSlash: {
    color: 'rgba(255,255,255,0.5)',
    fontSize: 20,
    marginHorizontal: 4,
  },
  bpStatus: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 8,
    marginTop: 8,
  },
  bpStatusText: {
    color: 'white',
    fontSize: 10,
    fontWeight: 'bold',
  },
  tempStatus: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 8,
    marginTop: 8,
  },
  tempStatusText: {
    color: 'white',
    fontSize: 10,
    fontWeight: 'bold',
  },
  ageContainer: {
    backgroundColor: 'rgba(255,255,255,0.05)',
    borderRadius: 16,
    padding: 16,
    marginBottom: 20,
    alignItems: 'center',
  },
  ageLabel: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  ageSubtext: {
    color: 'rgba(255,255,255,0.6)',
    fontSize: 12,
  },
  signalContainer: {
    backgroundColor: 'rgba(255,255,255,0.05)',
    borderRadius: 16,
    padding: 16,
    marginBottom: 20,
  },
  signalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  signalTitle: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  qualityBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 8,
  },
  qualityText: {
    color: 'white',
    fontSize: 10,
    fontWeight: 'bold',
  },
  chartContainer: {
    backgroundColor: 'rgba(0,0,0,0.3)',
    borderRadius: 12,
    overflow: 'hidden',
    marginBottom: 12,
    height: 100,
    position: 'relative',
    minHeight: 100,
  },
  chartGrid: {
    position: 'absolute',
    width: '100%',
    height: '100%',
    justifyContent: 'space-between',
    paddingVertical: 10,
  },
  gridLine: {
    height: 1,
    backgroundColor: 'rgba(255,255,255,0.1)',
  },
  centerLine: {
    backgroundColor: 'rgba(255,255,255,0.2)',
  },
  signalChart: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    position: 'relative',
    paddingHorizontal: 10,
  },
  signalBar: {
    position: 'absolute',
    bottom: 40,
    borderRadius: 1,
    minHeight: 2,
    maxHeight: 80,
  },
  chartLabels: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingHorizontal: 10,
    paddingVertical: 5,
  },
  chartLabel: {
    color: 'rgba(255,255,255,0.5)',
    fontSize: 10,
  },
  metricsRow: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  metric: {
    alignItems: 'center',
  },
  metricValue: {
    color: 'white',
    fontSize: 14,
    fontWeight: 'bold',
  },
  metricLabel: {
    color: 'rgba(255,255,255,0.5)',
    fontSize: 10,
    marginTop: 2,
  },
  confidenceSection: {
    backgroundColor: 'rgba(255,255,255,0.05)',
    borderRadius: 16,
    padding: 16,
    marginBottom: 20,
  },
  confidenceLabel: {
    color: 'white',
    fontSize: 14,
    fontWeight: '600',
    textAlign: 'center',
    marginBottom: 8,
  },
  confidenceBar: {
    width: '100%',
    height: 8,
    backgroundColor: 'rgba(255,255,255,0.1)',
    borderRadius: 4,
    overflow: 'hidden',
    marginBottom: 8,
  },
  confidenceFill: {
    height: '100%',
    borderRadius: 4,
  },
  confidenceValue: {
    color: 'rgba(255,255,255,0.8)',
    fontSize: 12,
    textAlign: 'center',
  },
  statusGrid: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    backgroundColor: 'rgba(255,255,255,0.05)',
    borderRadius: 16,
    padding: 12,
  },
  statusDot: {
    alignItems: 'center',
  },
  dot: {
    width: 12,
    height: 12,
    borderRadius: 6,
    marginBottom: 4,
  },
  statusLabel: {
    fontSize: 10,
    fontWeight: '500',
  },
});
